u16 callline = 0xFFFF;
int main() {
//---------------------------------------------------------------------------------
	ledBlink(0);
	readUserSettings();
	
	irqInit();
	// Start the RTC tracking IRQ
	initClockIRQ();

	REG_IPC_SYNC = 0;
	REG_IPC_FIFO_CR = IPC_FIFO_ENABLE;
	REG_IPC_FIFO_CR = IPC_FIFO_SEND_CLEAR | IPC_FIFO_ENABLE | IPC_FIFO_ERROR;
	//enableSound();

	while (true) {
		if((REG_VCOUNT == callline) && (REG_IPC_FIFO_CR & IPC_FIFO_SEND_EMPTY) && (REG_KEYXY & 0x1)) //X not pressed
		{
			REG_IPC_FIFO_TX = 0; //send cmd 0
			while(REG_VCOUNT == callline); //don't send 2 or more
		}
		if(!(REG_IPC_FIFO_CR & IPC_FIFO_RECV_EMPTY))
		{
			int addr = (REG_IPC_FIFO_RX & ~0xC0000000/*todo*/); //addr + flags //flags 2 most upperen Bits dma = 0 u8 = 1 u16 = 2 u32 = 3
			while(REG_IPC_FIFO_CR & IPC_FIFO_RECV_EMPTY);
			int val = REG_IPC_FIFO_RX;
			switch(addr)
			{
				case 0x1FFFFFFFD: //getkeys
					{
						touchPosition tempPos = {0};
						u16 keys= REG_KEYXY;
						if(!touchPenDown()) {
							keys |= KEY_TOUCH;
  						} else {
							keys &= ~KEY_TOUCH;
						}
						touchReadXY(&tempPos);	
						REG_IPC_FIFO_TX = 1; //send cmd 1
						REG_IPC_FIFO_TX = keys;
						REG_IPC_FIFO_TX = tempPos.px;
						REG_IPC_FIFO_TX = tempPos.py;
					}

				case 0x1FFFFFFF: //set callline
				callline = val;
				default:
				break;
			}
		}
	}
	return 0;
}